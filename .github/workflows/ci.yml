name: CoyIM CI

on: [push]

jobs:
  test-linux:
    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        go: [ '1.20', '1.19' ]

    name: Test go-${{ matrix.go }} (Linux)
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libgtk-3-dev gettext libglib2.0-dev libc6-dev-i386 xvfb
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
      - name: install project dependencies
        run: make -C ci/ deps
        env:
          DISPLAY: ':99.0'
      - name: run tests
        run: make -C ci/
        env:
          DISPLAY: ':99.0'
          COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}

  test-osx:
    runs-on: macos-10.15

    name: Test go-1.19 (OS X)
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: install OS dependencies
        run: brew install gtk+3 adwaita-icon-theme hicolor-icon-theme shared-mime-info gtk-mac-integration fileicon
      - uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: install project dependencies
        run: make -C ci/ deps
        env:
          DISPLAY: ':99.0'
      - name: run tests
        run: make -C ci/
        env:
          DISPLAY: ':99.0'
          COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}

  test-win:
    runs-on: windows-2019

    defaults:
      run:
        shell: msys2 {0}

    strategy:
      fail-fast: false
      matrix:
        go: [ '1.19' ]

    name: Test go-${{ matrix.go }} (Windows)
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
      - name: Setup msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          path-type: inherit
          install: autoconf automake make sed zlib-devel
      - name: Update msys2
        run: pacman --noconfirm --needed -Syuu
        continue-on-error: true
      - name: Update msys2 again
        run: pacman --noconfirm --needed -Syuu
        continue-on-error: true
      - name: Install dependencies
        run: >
          pacman --noconfirm --needed -Sy
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gdb
          mingw-w64-x86_64-gtk3
          mingw-w64-x86_64-libiconv
          mingw-w64-x86_64-make
          mingw-w64-x86_64-nsis
          mingw-w64-x86_64-pango
          mingw-w64-x86_64-pkg-config
          cygutils
      - name: Install Windows deps
        run: make win-ci-deps
      - name: install project dependencies
        run: make -C ci/ deps
        env:
          DISPLAY: ':99.0'
      - name: show temp directories before tests
        run: ls -alF C:/Users/runneradmin/AppData/Local/Temp
      - name: run tests
        run: |
          export PC_FILES_DIR=`cygpath -u '${{ env.PKG_CONFIG_PC_FILES_DIR }}'`
          sh ./scripts/fix_pkg_config_pc_files.sh "$PC_FILES_DIR"
          PKG_CONFIG_PATH="$PC_FILES_DIR:$PKG_CONFIG_PATH" make -C ci/
        env:
          DISPLAY: ':99.0'
          COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
          RUN_WITH: cygdrop -p Backup -p Restore
          PKG_CONFIG_PC_FILES_DIR: ${{ env.REPOSITORY_DIR }}/.pkgconfig-pc-files
      - name: show temp directories after tests
        run: ls -alF C:/Users/runneradmin/AppData/Local/Temp

  notify-test:
    name: Notify on success or failure of test
    needs: [test-linux, test-osx, test-win]
    runs-on: ubuntu-24.04
    if: always()
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - uses: technote-space/workflow-conclusion-action@v1
      - uses: ./.github/actions/ci-conclusion-message
        id: message-generator
        with:
          status: ${{ env.WORKFLOW_CONCLUSION }}
          commit_id: ${{ github.sha }}
          commit_message: ${{ github.event.head_commit.message }}
      - name: send message to Matrix on conclusion
        uses: olabiniV2/matrix-message@v0.0.1
        with:
          room_id: ${{ secrets.MATRIX_COYIM_ROOM_ID }}
          access_token: ${{ secrets.MATRIX_ACCESS_TOKEN }}
          server: ${{ secrets.MATRIX_SERVER }}
          subject: ${{ steps.message-generator.outputs.subject }}
          message: ${{ steps.message-generator.outputs.message }}

  build-release-linux:
    name: Build release (Linux)
    needs: test-linux
    runs-on: ubuntu-24.04
    if: startsWith( github.ref, 'refs/tags/')

    steps:
      - name: checkout
        uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '1.19'
      - name: build release
        run: make -C ci/ make-gui-for-release-linux
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist-linux
          path: ${{ github.workspace }}/release/*
          retention-days: 5
          if-no-files-found: error

  build-release-osx:
    name: Build release (OS X)
    needs: test-osx
    runs-on: macos-10.15
    if: startsWith( github.ref, 'refs/tags/')

    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: install OS dependencies
        run: brew install gsettings-desktop-schemas gtk+3 adwaita-icon-theme hicolor-icon-theme shared-mime-info gtk-mac-integration fileicon
      - name: install appdmg
        run: npm install --global appdmg
      - uses: actions/setup-go@v3
        with:
          go-version: '1.19'
      - name: install project dependencies
        run: make -C ci/ deps
      - name: build release
        run: |
          make -C ci/ clean-mac-bundle
          make build-gui
          make -C ci/ make-mac-bundle
          make -C ci/ make-dmg
          make -C ci/ make-gui-for-release
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist-osx
          path: ${{ github.workspace }}/release/*
          retention-days: 5
          if-no-files-found: error

  build-release-win:
    name: Build release (Windows)
    needs: test-win
    runs-on: windows-2019
    if: startsWith( github.ref, 'refs/tags/')

    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.19'
      - name: Setup msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          path-type: inherit
          install: autoconf automake make sed zlib-devel
      - name: Update msys2
        run: pacman --noconfirm --needed -Syuu
        continue-on-error: true
      - name: Update msys2 again
        run: pacman --noconfirm --needed -Syuu
        continue-on-error: true
      - name: Install dependencies
        run: >
          pacman --noconfirm --needed -Sy
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gdb
          mingw-w64-x86_64-gtk3
          mingw-w64-x86_64-libiconv
          mingw-w64-x86_64-make
          mingw-w64-x86_64-nsis
          mingw-w64-x86_64-pango
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-gsettings-desktop-schemas
      - name: Create release dependencies
        run: |
          mkdir -p release/share
          mkdir -p release/lib
          export LDIR=/mingw64/bin

          cp $LDIR/gdbus.exe release
          cp $LDIR/libatk-1.0-0.dll release
          cp $LDIR/libbz2-1.dll release
          cp $LDIR/libbrotlicommon.dll release
          cp $LDIR/libbrotlidec.dll release
          cp $LDIR/libcairo-2.dll release
          cp $LDIR/libcairo-gobject-2.dll release
          cp $LDIR/libdatrie-1.dll release
          cp $LDIR/libepoxy-0.dll release
          cp $LDIR/libexpat-1.dll release
          cp $LDIR/libffi-*.dll release
          cp $LDIR/libfontconfig-1.dll release
          cp $LDIR/libfreetype-6.dll release
          cp $LDIR/libfribidi-0.dll release
          cp $LDIR/libgcc_s_seh-1.dll release
          cp $LDIR/libgdk_pixbuf-2.0-0.dll release
          cp $LDIR/libgdk-3-0.dll release
          cp $LDIR/libgio-2.0-0.dll release
          cp $LDIR/libglib-2.0-0.dll release
          cp $LDIR/libgmodule-2.0-0.dll release
          cp $LDIR/libgobject-2.0-0.dll release
          cp $LDIR/libgraphite2.dll release
          cp $LDIR/libgtk-3-0.dll release
          cp $LDIR/libharfbuzz-0.dll release
          cp $LDIR/libiconv-2.dll release
          cp $LDIR/libintl-8.dll release
          cp $LDIR/libjpeg-8.dll release
          cp $LDIR/liblzma-5.dll release
          cp $LDIR/libpango-1.0-0.dll release
          cp $LDIR/libpangocairo-1.0-0.dll release
          cp $LDIR/libpangoft2-1.0-0.dll release
          cp $LDIR/libpangowin32-1.0-0.dll release
          cp $LDIR/libpcre-1.dll release
          cp $LDIR/libpixman-1-0.dll release
          cp $LDIR/libpng16-16.dll release
          cp $LDIR/librsvg-2-2.dll release
          cp $LDIR/libstdc++-6.dll release
          cp $LDIR/libthai-0.dll release
          cp $LDIR/libtiff-5.dll release
          cp $LDIR/libtiffxx-5.dll release
          cp $LDIR/libturbojpeg.dll release
          cp $LDIR/libwinpthread-1.dll release
          cp $LDIR/libxml2-2.dll release
          cp $LDIR/zlib1.dll release

          cp -r /mingw64/lib/gdk-pixbuf-2.0 release/lib
          cp -r /mingw64/share/icons release/share
          cp -r /mingw64/share/glib-2.0 release/share

          mkdir -p release/share/locale/es/LC_MESSAGES
          mkdir -p release/share/locale/sv/LC_MESSAGES
          mkdir -p release/share/locale/fr/LC_MESSAGES
          mkdir -p release/share/locale/pt/LC_MESSAGES

          cp -r /mingw64/share/locale/es/LC_MESSAGES/glib*.mo release/share/locale/es/LC_MESSAGES
          cp -r /mingw64/share/locale/es/LC_MESSAGES/gtk*.mo release/share/locale/es/LC_MESSAGES

          cp -r /mingw64/share/locale/sv/LC_MESSAGES/glib*.mo release/share/locale/sv/LC_MESSAGES
          cp -r /mingw64/share/locale/sv/LC_MESSAGES/gtk*.mo release/share/locale/sv/LC_MESSAGES

          cp -r /mingw64/share/locale/fr/LC_MESSAGES/glib*.mo release/share/locale/fr/LC_MESSAGES
          cp -r /mingw64/share/locale/fr/LC_MESSAGES/gtk*.mo release/share/locale/fr/LC_MESSAGES

          cp -r /mingw64/share/locale/pt/LC_MESSAGES/glib*.mo release/share/locale/pt/LC_MESSAGES
          cp -r /mingw64/share/locale/pt/LC_MESSAGES/gtk*.mo release/share/locale/pt/LC_MESSAGES
      - name: Install Windows deps
        run: make win-ci-deps
      - name: Build release
        run: make -C ci/ make-gui-for-release-win
      - name: Create zip file
        run: cd release && 7z a -tzip coyim.zip *
      - name: Create checksum for zip-file
        run: openssl dgst -sha256 release/coyim.zip >> release/coyim.zip_checksum
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist-win
          path: |
            ${{ github.workspace }}/release/coyim.zip
            ${{ github.workspace }}/release/coyim.zip_checksum
          retention-days: 5
          if-no-files-found: error

  build-windows-installer:
    runs-on: windows-2019
    needs: build-release-win

    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          path-type: inherit
      - name: Update msys2
        run: pacman --noconfirm --needed -Syuu
        continue-on-error: true
      - name: Update msys2 again
        run: pacman --noconfirm --needed -Syuu
        continue-on-error: true
      - name: Install dependencies
        run: |
          pacman --noconfirm --needed -Sy mingw-w64-x86_64-nsis
      - uses: actions/download-artifact@v2
        name: dist-win
      - name: Create windows installer input files
        run: |
          mkdir -p win_installer
          cd win_installer
          7z x -y -r -tzip ../dist-win/coyim.zip
      - name: Get the current tag
        id: current_tag
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
      - name: Create installer
        uses: joncloud/makensis-action@v3.4
        with:
          script-file: build/windows/installer_definition.nsi
          arguments: "/V3 /NOCD /DVERSION=${{ steps.current_tag.outputs.VERSION }}"
      - name: Create checksum for installer file
        run: openssl dgst -sha256 "CoyIM installer.exe" >> "CoyIM installer.exe_checksum"
      - name: Archive installer artifacts
        uses: actions/upload-artifact@v2
        with:
          name: installer-win
          path: |
            CoyIM installer.exe
            CoyIM installer.exe_checksum
          retention-days: 5
          if-no-files-found: error

  create-release-from-tag:
    name: Create release from tag
    runs-on: ubuntu-24.04
    if: startsWith( github.ref, 'refs/tags/v' )
    outputs:
      upload-url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  upload-release-linux:
    name: Upload release (Linux)
    needs: [build-release-linux, create-release-from-tag]
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/download-artifact@v2
        name: dist-linux
      - name: Upload Linux binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release-from-tag.outputs.upload-url }}
          asset_path: dist-linux/coyim_linux_amd64
          asset_name: coyim_linux_amd64
          asset_content_type: application/octet-stream
      - name: Upload Linux build_info
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release-from-tag.outputs.upload-url }}
          asset_path: dist-linux/build_info_linux_amd64
          asset_name: coyim_linux_amd64_build_info
          asset_content_type: text/plain
      - name: Upload Linux checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release-from-tag.outputs.upload-url }}
          asset_path: dist-linux/coyim_linux_amd64_checksum
          asset_name: coyim_linux_amd64_checksum
          asset_content_type: text/plain

  upload-release-win:
    name: Upload release (Windows)
    needs: [build-release-win, build-windows-installer, create-release-from-tag]
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/download-artifact@v2
        name: dist-win
      - uses: actions/download-artifact@v2
        name: installer-win
      - name: Upload Windows zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release-from-tag.outputs.upload-url }}
          asset_path: dist-win/coyim.zip
          asset_name: "CoyIM (Windows).zip"
          asset_content_type: application/zip
      - name: Upload Windows zip checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release-from-tag.outputs.upload-url }}
          asset_path: dist-win/coyim.zip_checksum
          asset_name: "CoyIM (Windows).zip_checksum"
          asset_content_type: text/plain
      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release-from-tag.outputs.upload-url }}
          asset_path: "installer-win/CoyIM installer.exe"
          asset_name: "CoyIM Installer.exe"
          asset_content_type: application/octet-stream
      - name: Upload Windows Installer checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release-from-tag.outputs.upload-url }}
          asset_path: "installer-win/CoyIM installer.exe_checksum"
          asset_name: "CoyIM Installer.exe_checksum"
          asset_content_type: text/plain

  upload-release-osx:
    name: Upload release (OS X)
    needs: [build-release-osx, create-release-from-tag]
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/download-artifact@v2
        name: dist-osx
      - name: Upload OS X binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release-from-tag.outputs.upload-url }}
          asset_path: dist-osx/coyim_darwin_amd64
          asset_name: coyim_darwin_amd64
          asset_content_type: application/octet-stream
      - name: Upload OS X Disk Image
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release-from-tag.outputs.upload-url }}
          asset_path: dist-osx/coyim.dmg
          asset_name: coyim.dmg
          asset_content_type: application/octet-stream
      - name: Upload OS X checksum for DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release-from-tag.outputs.upload-url }}
          asset_path: dist-osx/coyim.dmg_checksum
          asset_name: coyim.dmg_checksum
          asset_content_type: text/plain
      - name: Upload OS X checksum for binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release-from-tag.outputs.upload-url }}
          asset_path: dist-osx/coyim_darwin_amd64_checksum
          asset_name: coyim_darwin_amd64_checksum
          asset_content_type: text/plain
